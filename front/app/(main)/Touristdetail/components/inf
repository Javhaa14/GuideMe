// "use client";

// import { useForm } from "react-hook-form";
// import { zodResolver } from "@hookform/resolvers/zod";
// import * as z from "zod";
// import { useEffect, useState } from "react";
// import DatePicker from "react-datepicker";
// import "react-datepicker/dist/react-datepicker.css";

// const schema = z.object({
//   firstName: z.string().min(1, "First name is required"),
//   lastName: z.string().min(1, "Last name is required"),
//   country: z.string().min(1, "Country is required"),
//   city: z.string().min(1, "City is required"),
//   joinDate: z.date(),
// });

// type FormData = z.infer<typeof schema>;

// export default function TravelerForm() {
//   const {
//     register,
//     handleSubmit,
//     setValue,
//     watch,
//     formState: { errors },
//   } = useForm<FormData>({
//     resolver: zodResolver(schema),
//     defaultValues: {
//       joinDate: new Date(),
//     },
//   });

//   const [countries, setCountries] = useState<string[]>([]);
//   const [cities, setCities] = useState<string[]>([]);

//   const selectedCountry = watch("country");

//   useEffect(() => {
//     // Fetch countries
//     fetch("https://restcountries.com/v3.1/all")
//       .then((res) => res.json())
//       .then((data) =>
//         setCountries(data.map((country: any) => country.name.common).sort())
//       );
//   }, []);

//   useEffect(() => {
//     if (!selectedCountry) return;

//     // Example using countriesnow.space
//     fetch("https://countriesnow.space/api/v0.1/countries/cities", {
//       method: "POST",
//       headers: {
//         "Content-Type": "application/json",
//       },
//       body: JSON.stringify({ country: selectedCountry }),
//     })
//       .then((res) => res.json())
//       .then((data) => setCities(data.data || []));
//   }, [selectedCountry]);

//   const onSubmit = (data: FormData) => {
//     console.log("Validated form:", data);
//   };

//   return (
//     <form
//       onSubmit={handleSubmit(onSubmit)}
//       className="space-y-6 max-w-xl mx-auto"
//     >
//       <div>
//         <label>First Name</label>
//         <input {...register("firstName")} className="input" />
//         {errors.firstName && (
//           <p className="text-red-500">{errors.firstName.message}</p>
//         )}
//       </div>

//       <div>
//         <label>Last Name</label>
//         <input {...register("lastName")} className="input" />
//         {errors.lastName && (
//           <p className="text-red-500">{errors.lastName.message}</p>
//         )}
//       </div>

//       <div>
//         <label>Country</label>
//         <select {...register("country")} className="input">
//           <option value="">Select a country</option>
//           {countries.map((country) => (
//             <option key={country} value={country}>
//               {country}
//             </option>
//           ))}
//         </select>
//         {errors.country && (
//           <p className="text-red-500">{errors.country.message}</p>
//         )}
//       </div>

//       <div>
//         <label>City</label>
//         <select {...register("city")} className="input">
//           <option value="">Select a city</option>
//           {cities.map((city) => (
//             <option key={city} value={city}>
//               {city}
//             </option>
//           ))}
//         </select>
//         {errors.city && <p className="text-red-500">{errors.city.message}</p>}
//       </div>

//       <div>
//         <label>Join Date</label>
//         <DatePicker
//           selected={watch("joinDate")}
//           onChange={(date) => setValue("joinDate", date as Date)}
//           className="input"
//         />
//         {errors.joinDate && (
//           <p className="text-red-500">{errors.joinDate.message}</p>
//         )}
//       </div>

//       <button type="submit" className="btn btn-primary">
//         Submit
//       </button>
//     </form>
//   );
// }
