import { socket } from "@/lib/socket";
import { axiosInstance } from "@/lib/utils";
import React, {
  createContext,
  ReactNode,
  useContext,
  useEffect,
  useState,
} from "react";

interface NotificationContextType {
  unreadCount: number;
  setUnreadCount: React.Dispatch<React.SetStateAction<number>>;
  markAsRead: () => Promise<void>;
}
interface NotificationProviderProps {
  userId?: string;
  children: ReactNode; // children-–∏–π–≥ ReactNode –≥—ç–∂ —Ç–æ–¥–æ—Ä—Ö–æ–π–ª–Ω–æ
}
const NotificationContext = createContext<NotificationContextType | undefined>(
  undefined
);

export const NotificationProvider = ({
  userId,
  children,
}: NotificationProviderProps) => {
  const [unreadCount, setUnreadCount] = useState(0);

  useEffect(() => {
    if (!userId) return;

    // Socket room-–¥ join —Ö–∏–π—Ö —Ñ—É–Ω–∫—Ü
    const joinRoom = () => {
      console.log("‚û°Ô∏è Emitting joinNotificationRoom", userId);
      socket.emit("joinNotificationRoom", userId);
    };

    // Socket —Ö–æ–ª–±–æ–ª—Ç –±–æ–ª—Å–æ–Ω “Ø–µ–¥ room-–¥ –æ—Ä–æ—Ö
    socket.on("connect", joinRoom);
    joinRoom();

    // Socket-—Å realtime –º—ç–¥—ç–≥–¥—ç–ª —Ö“Ø–ª—ç—ç–Ω –∞–≤–∞—Ö
    socket.on("notify", (data) => {
      // console.log('‚úÖ Realtime notification:', data);
      setUnreadCount((prev) => prev + 1);
    });

    // –°–µ—Ä–≤–µ—Ä—ç—ç—Å –∞–Ω—Ö–¥–∞–≥—á unread —Ç–æ–æ–≥ –∞–≤–∞—Ö
    axiosInstance
      .get(`/notification/unread-count/${userId}`)
      .then((res) => {
        console.log("üì• Initial unread:", res.data.count);
        setUnreadCount(res.data.count || 0);
      })
      .catch((err) => console.error("üî¥ Failed to fetch unread:", err));

    // –¶—ç–≤—ç—Ä–ª—ç—Ö
    return () => {
      socket.off("connect", joinRoom);
      socket.off("notify");
    };
  }, [userId]);

  // –°–µ—Ä–≤–µ—Ä —Ä“Ø“Ø unread-–∏–π–≥ —É–Ω—à—Å–∞–Ω –≥—ç–∂ —Ç—ç–º–¥—ç–≥–ª—ç—Ö —Ñ—É–Ω–∫—Ü
  const markAsRead = async () => {
    if (!userId) return;
    try {
      await axiosInstance.put(`/notification/mark-seen/${userId}`);
      setUnreadCount(0);
    } catch (error) {
      console.error("üî¥ Failed to mark notifications as read:", error);
    }
  };

  return (
    <NotificationContext.Provider
      value={{ unreadCount, setUnreadCount, markAsRead }}
    >
      {children}
    </NotificationContext.Provider>
  );
};

// Hook —Ö—ç–ª–±—ç—Ä—ç—ç—Ä –∞—à–∏–≥–ª–∞—Ö–∞–¥ —Ö—è–ª–±–∞—Ä –±–æ–ª–≥–æ—Ö
export const useLikeNotification = (): NotificationContextType => {
  const context = useContext(NotificationContext);
  if (!context)
    throw new Error("useNotification must be used within NotificationProvider");
  return context;
};
